diff --git a/apps/CMakeLists.txt b/apps/CMakeLists.txt
index 85ae4a2da..23b63d34c 100644
--- a/apps/CMakeLists.txt
+++ b/apps/CMakeLists.txt
@@ -8,7 +8,7 @@ set(REASON "Disabled by default")
 PCL_SUBSYS_OPTION(build "${SUBSYS_NAME}" "${SUBSYS_DESC}" ${DEFAULT} "${REASON}")
 PCL_SUBSYS_DEPEND(build NAME ${SUBSYS_NAME} DEPS ${SUBSYS_DEPS} OPT_DEPS ${SUBSYS_OPT_DEPS})
 
-if(NOT build)
+if(NOT build OR NOT PCL_BINARIES)
   return()
 endif()
 
diff --git a/apps/cloud_composer/CMakeLists.txt b/apps/cloud_composer/CMakeLists.txt
index 24196bcc2..f464fc354 100644
--- a/apps/cloud_composer/CMakeLists.txt
+++ b/apps/cloud_composer/CMakeLists.txt
@@ -127,9 +127,11 @@ set(resources resources/resources.qrc)
 
 list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS "src")
 
-set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
-PCL_ADD_EXECUTABLE(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${uis} ${incs} ${srcs} ${resources} ${impl_incs})
-target_link_libraries("${EXE_NAME}" pcl_cc_tool_interface pcl_common pcl_io pcl_visualization pcl_filters ${QTX}::Widgets)
+if(PCL_BINARIES)
+  set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
+  PCL_ADD_EXECUTABLE(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${uis} ${incs} ${srcs} ${resources} ${impl_incs})
+  target_link_libraries("${EXE_NAME}" pcl_cc_tool_interface pcl_common pcl_io pcl_visualization pcl_filters ${QTX}::Widgets)
+endif()
 
 
 
diff --git a/apps/in_hand_scanner/CMakeLists.txt b/apps/in_hand_scanner/CMakeLists.txt
index 24d56ba65..12e306483 100644
--- a/apps/in_hand_scanner/CMakeLists.txt
+++ b/apps/in_hand_scanner/CMakeLists.txt
@@ -79,35 +79,39 @@ endif()
 
 include_directories("${CMAKE_CURRENT_BINARY_DIR}" "${CMAKE_CURRENT_SOURCE_DIR}/include")
 
-set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
-
-PCL_ADD_EXECUTABLE(
-  ${EXE_NAME}
-  COMPONENT
-    ${SUBSUBSYS_NAME}
-  SOURCES
-    ${SRCS}
-    ${INCS}
-    ${IMPL_INCS}
-    ${UI}
-  BUNDLE)
-target_link_libraries("${EXE_NAME}" ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QTX}::Concurrent ${QTX}::Widgets ${QTX}::OpenGL)
+if(PCL_BINARIES)
+  set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
+
+  PCL_ADD_EXECUTABLE(
+    ${EXE_NAME}
+    COMPONENT
+      ${SUBSUBSYS_NAME}
+    SOURCES
+      ${SRCS}
+      ${INCS}
+      ${IMPL_INCS}
+      ${UI}
+    BUNDLE)
+  target_link_libraries("${EXE_NAME}" ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QTX}::Concurrent ${QTX}::Widgets ${QTX}::OpenGL)
+endif()
 
 pcl_add_includes("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${INCS})
 pcl_add_includes("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${IMPL_INCS})
 
-PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
+if(PCL_BINARIES)
+  PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
 
-PCL_ADD_EXECUTABLE(
-  pcl_offline_integration
-  COMPONENT
-    ${SUBSUBSYS_NAME}
-  SOURCES
-    ${OI_SRCS}
-    ${OI_INCS}
-  BUNDLE)
+  PCL_ADD_EXECUTABLE(
+    pcl_offline_integration
+    COMPONENT
+      ${SUBSUBSYS_NAME}
+    SOURCES
+      ${OI_SRCS}
+      ${OI_INCS}
+    BUNDLE)
 
-target_link_libraries(pcl_offline_integration ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QTX}::Concurrent ${QTX}::Widgets ${QTX}::OpenGL)
+  target_link_libraries(pcl_offline_integration ${SUBSUBSYS_LIBS} ${OPENGL_LIBRARIES} ${QTX}::Concurrent ${QTX}::Widgets ${QTX}::OpenGL)
+endif()
 
 # Add to the compound apps target
 list(APPEND PCL_APPS_ALL_TARGETS ${PCL_IN_HAND_SCANNER_ALL_TARGETS})
diff --git a/apps/modeler/CMakeLists.txt b/apps/modeler/CMakeLists.txt
index 7c6212482..f3a3e9206 100644
--- a/apps/modeler/CMakeLists.txt
+++ b/apps/modeler/CMakeLists.txt
@@ -105,26 +105,28 @@ set(impl_incs
 
 list(APPEND CMAKE_AUTOUIC_SEARCH_PATHS "${CMAKE_CURRENT_SOURCE_DIR}")
 
-# Generate executable
-set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
-PCL_ADD_EXECUTABLE(
-  ${EXE_NAME}
-  COMPONENT
-    ${SUBSUBSYS_NAME}
-  SOURCES
-    ${uis}
-    ${resources}
-    ${srcs}
-    ${incs}
-    ${impl_incs})
-
-target_link_libraries("${EXE_NAME}" pcl_common pcl_io pcl_kdtree pcl_filters pcl_visualization pcl_segmentation pcl_surface pcl_features pcl_sample_consensus pcl_search ${QTX}::Widgets)
-
-# Install include files
-PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${incs})
-PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${impl_incs})
-
-PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
+if(PCL_BINARIES)
+  # Generate executable
+  set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
+  PCL_ADD_EXECUTABLE(
+    ${EXE_NAME}
+    COMPONENT
+      ${SUBSUBSYS_NAME}
+    SOURCES
+      ${uis}
+      ${resources}
+      ${srcs}
+      ${incs}
+      ${impl_incs})
+
+  target_link_libraries("${EXE_NAME}" pcl_common pcl_io pcl_kdtree pcl_filters pcl_visualization pcl_segmentation pcl_surface pcl_features pcl_sample_consensus pcl_search ${QTX}::Widgets)
+
+  # Install include files
+  PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}" ${incs})
+  PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSUBSYS_NAME}/impl" ${impl_incs})
+
+  PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
+endif()
 
 # Add to the compound apps target
 list(APPEND PCL_APPS_ALL_TARGETS ${EXE_NAME})
diff --git a/apps/point_cloud_editor/CMakeLists.txt b/apps/point_cloud_editor/CMakeLists.txt
index d46b49f53..2551ac522 100644
--- a/apps/point_cloud_editor/CMakeLists.txt
+++ b/apps/point_cloud_editor/CMakeLists.txt
@@ -76,20 +76,24 @@ include_directories(
   "${CMAKE_CURRENT_SOURCE_DIR}/include"
 )
 
-set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
-PCL_ADD_EXECUTABLE(
-  ${EXE_NAME}
-  COMPONENT
-    ${SUBSUBSYS_NAME}
-  SOURCES
-    ${SRCS}
-    ${RSRC}
-    ${INCS})
+if(PCL_BINARIES)
+  set(EXE_NAME "pcl_${SUBSUBSYS_NAME}")
+  PCL_ADD_EXECUTABLE(
+    ${EXE_NAME}
+    COMPONENT
+      ${SUBSUBSYS_NAME}
+    SOURCES
+      ${SRCS}
+      ${RSRC}
+      ${INCS})
 
-target_link_libraries("${EXE_NAME}" ${QTX}::Widgets ${QTX}::OpenGL ${OPENGL_LIBRARIES} ${BOOST_LIBRARIES} pcl_common pcl_io pcl_filters)
+  target_link_libraries("${EXE_NAME}" ${QTX}::Widgets ${QTX}::OpenGL ${OPENGL_LIBRARIES} ${BOOST_LIBRARIES} pcl_common pcl_io pcl_filters)
+endif()
 
 PCL_ADD_INCLUDES("${SUBSUBSYS_NAME}" "${SUBSYS_NAME}/${SUBSUBSYS_NAME}" ${INCS})
-PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
+if(PCL_BINARIES)
+  PCL_MAKE_PKGCONFIG(${EXE_NAME} COMPONENT ${SUBSUBSYS_NAME} DESC ${SUBSUBSYS_DESC})
+endif()
 
 # Add to the compound apps target
 list(APPEND PCL_APPS_ALL_TARGETS ${EXE_NAME})
diff --git a/cmake/pcl_find_boost.cmake b/cmake/pcl_find_boost.cmake
index b60fafae4..4e159cf95 100644
--- a/cmake/pcl_find_boost.cmake
+++ b/cmake/pcl_find_boost.cmake
@@ -1,4 +1,6 @@
 # Find and set Boost flags
+message(STATUS "SYSTEM: " ${Boost_NO_SYSTEM_PATHS})
+message(STATUS "DATETIME: " ${Boost_DATE_TIME_LIBRARY})
 
 # If we would like to compile against a dynamically linked Boost
 if(PCL_BUILD_WITH_BOOST_DYNAMIC_LINKING_WIN32 AND WIN32)
@@ -27,7 +29,11 @@ endif()
 
 # Required boost modules
 set(BOOST_REQUIRED_MODULES filesystem date_time iostreams system)
-find_package(Boost 1.65.0 REQUIRED COMPONENTS ${BOOST_REQUIRED_MODULES})
+find_package(Boost 1.70.0 REQUIRED COMPONENTS ${BOOST_REQUIRED_MODULES})
+
+message(STATUS "FOUND: " ${Boost_FOUND})
+message(STATUS "INCLUDE: " ${Boost_INCLUDE_DIRS})
+message(STATUS "LIB: " ${Boost_LIBRARY_DIRS})
 
 if(Boost_FOUND)
   set(BOOST_FOUND TRUE)
diff --git a/cmake/pcl_targets.cmake b/cmake/pcl_targets.cmake
index 86d06d0c8..4aaca2e52 100644
--- a/cmake/pcl_targets.cmake
+++ b/cmake/pcl_targets.cmake
@@ -295,34 +295,36 @@ function(PCL_ADD_EXECUTABLE _name)
     message(FATAL_ERROR "PCL_ADD_EXECUTABLE requires parameter COMPONENT.")
   endif()
 
-  if(ARGS_BUNDLE AND APPLE AND VTK_USE_COCOA)
-    add_executable(${_name} MACOSX_BUNDLE ${ARGS_SOURCES})
-  else()
-    add_executable(${_name} ${ARGS_SOURCES})
-  endif()
-  PCL_ADD_VERSION_INFO(${_name})
+  if(PCL_BINARIES)
+    if(ARGS_BUNDLE AND APPLE AND VTK_USE_COCOA)
+      add_executable(${_name} MACOSX_BUNDLE ${ARGS_SOURCES})
+    else()
+      add_executable(${_name} ${ARGS_SOURCES})
+    endif()
+    PCL_ADD_VERSION_INFO(${_name})
 
-  target_link_libraries(${_name} Threads::Threads)
+    target_link_libraries(${_name} Threads::Threads)
 
-  if(WIN32 AND MSVC)
-    set_target_properties(${_name} PROPERTIES DEBUG_OUTPUT_NAME ${_name}${CMAKE_DEBUG_POSTFIX}
-                                              RELEASE_OUTPUT_NAME ${_name}${CMAKE_RELEASE_POSTFIX})
-  endif()
+    if(WIN32 AND MSVC)
+      set_target_properties(${_name} PROPERTIES DEBUG_OUTPUT_NAME ${_name}${CMAKE_DEBUG_POSTFIX}
+                                                RELEASE_OUTPUT_NAME ${_name}${CMAKE_RELEASE_POSTFIX})
+    endif()
 
-  # Some app targets report are defined with subsys other than apps
-  # It's simpler check for tools and assume everythin else as an app
-  if(${ARGS_COMPONENT} STREQUAL "tools")
-    set_target_properties(${_name} PROPERTIES FOLDER "Tools")
-  else()
-    set_target_properties(${_name} PROPERTIES FOLDER "Apps")
-  endif()
+    # Some app targets report are defined with subsys other than apps
+    # It's simpler check for tools and assume everythin else as an app
+    if(${ARGS_COMPONENT} STREQUAL "tools")
+      set_target_properties(${_name} PROPERTIES FOLDER "Tools")
+    else()
+      set_target_properties(${_name} PROPERTIES FOLDER "Apps")
+    endif()
 
-  set(PCL_EXECUTABLES ${PCL_EXECUTABLES} ${_name})
+    set(PCL_EXECUTABLES ${PCL_EXECUTABLES} ${_name})
 
-  if(ARGS_BUNDLE AND APPLE AND VTK_USE_COCOA)
-    install(TARGETS ${_name} BUNDLE DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${ARGS_COMPONENT})
-  else()
-    install(TARGETS ${_name} RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${ARGS_COMPONENT})
+    if(ARGS_BUNDLE AND APPLE AND VTK_USE_COCOA)
+      install(TARGETS ${_name} BUNDLE DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${ARGS_COMPONENT})
+    else()
+      install(TARGETS ${_name} RUNTIME DESTINATION ${BIN_INSTALL_DIR} COMPONENT pcl_${ARGS_COMPONENT})
+    endif()
   endif()
 
   string(TOUPPER ${ARGS_COMPONENT} _component_upper)
diff --git a/gpu/kinfu/tools/CMakeLists.txt b/gpu/kinfu/tools/CMakeLists.txt
index e1593b380..671e21a82 100644
--- a/gpu/kinfu/tools/CMakeLists.txt
+++ b/gpu/kinfu/tools/CMakeLists.txt
@@ -24,8 +24,10 @@ set(srcs kinfu_app.cpp capture.cpp evaluation.cpp)
 
 source_group("Source Files" FILES ${srcs})
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
-target_link_libraries(${the_target} pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
+  target_link_libraries(${the_target} pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
+endif()
 
 if(OpenCV_FOUND)
   target_link_libraries("${the_target}" ${OpenCV_LIBS})
@@ -35,5 +37,7 @@ endif()
 set(the_target pcl_record_tsdfvolume)
 set(srcs record_tsdfvolume.cpp capture.cpp)
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs})
-target_link_libraries(${the_target} pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs})
+  target_link_libraries(${the_target} pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu)
+endif()
diff --git a/gpu/kinfu_large_scale/tools/CMakeLists.txt b/gpu/kinfu_large_scale/tools/CMakeLists.txt
index d8d654721..b5188aa78 100644
--- a/gpu/kinfu_large_scale/tools/CMakeLists.txt
+++ b/gpu/kinfu_large_scale/tools/CMakeLists.txt
@@ -24,8 +24,10 @@ set(srcs standalone_texture_mapping.cpp)
 
 source_group("Source Files" FILES ${srcs})
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} BUNDLE)
-target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_kdtree pcl_features pcl_surface)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} BUNDLE)
+  target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_kdtree pcl_features pcl_surface)
+endif()
 
 ## KINECT FUSION
 set(the_target pcl_kinfu_largeScale)
@@ -33,19 +35,25 @@ set(srcs kinfuLS_app.cpp capture.cpp evaluation.cpp)
 
 source_group("Source Files" FILES ${srcs})
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
-target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_octree)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
+  target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_octree)
+endif()
 
 ## STANDALONE MARCHING CUBES
 set(the_target pcl_kinfu_largeScale_mesh_output)
 set(srcs process_kinfu_large_scale_output.cpp)
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
-target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
+  target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
+endif()
 
 ## RECORD MAPS_RGB
 set(the_target pcl_record_kinect_maps_rgb)
 set(srcs record_maps_rgb.cpp)
 
-PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
-target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(${the_target} COMPONENT ${SUBSUBSYS_NAME} SOURCES ${srcs} ${hdrs} BUNDLE)
+  target_link_libraries("${the_target}" pcl_common pcl_io ${OPENNI_LIBRARIES} pcl_visualization pcl_gpu_kinfu_large_scale pcl_filters)
+endif()
diff --git a/gpu/people/tools/CMakeLists.txt b/gpu/people/tools/CMakeLists.txt
index 6cd7e7f99..0971cbccd 100644
--- a/gpu/people/tools/CMakeLists.txt
+++ b/gpu/people/tools/CMakeLists.txt
@@ -16,14 +16,16 @@ include_directories(SYSTEM ${VTK_INCLUDE_DIRS})
 #PCL_ADD_EXECUTABLE(${the_target} "${SUBSYS_NAME}" people_tracking.cpp)
 #target_link_libraries("${the_target}" pcl_common pcl_kdtree pcl_gpu_people pcl_io pcl_visualization)
 
-if(HAVE_OPENNI)
-  PCL_ADD_EXECUTABLE(pcl_people_app COMPONENT ${SUBSYS_NAME} SOURCES people_app.cpp)
-  target_link_libraries (pcl_people_app pcl_common pcl_gpu_people pcl_io pcl_visualization ${Boost_LIBRARIES})
+if(PCL_BINARIES)
+  if(HAVE_OPENNI)
+    PCL_ADD_EXECUTABLE(pcl_people_app COMPONENT ${SUBSYS_NAME} SOURCES people_app.cpp)
+    target_link_libraries (pcl_people_app pcl_common pcl_gpu_people pcl_io pcl_visualization ${Boost_LIBRARIES})
+  endif()
+
+  PCL_ADD_EXECUTABLE(pcl_people_pcd_prob COMPONENT ${SUBSYS_NAME} SOURCES people_pcd_prob.cpp)
+  target_link_libraries (pcl_people_pcd_prob pcl_common pcl_kdtree pcl_gpu_people pcl_io pcl_visualization)
 endif()
 
-PCL_ADD_EXECUTABLE(pcl_people_pcd_prob COMPONENT ${SUBSYS_NAME} SOURCES people_pcd_prob.cpp)
-target_link_libraries (pcl_people_pcd_prob pcl_common pcl_kdtree pcl_gpu_people pcl_io pcl_visualization)
-
 #PCL_ADD_EXECUTABLE(people_pcd_folder COMPONENT ${SUBSYS_NAME} SOURCES people_pcd_folder.cpp)
 #target_link_libraries (people_pcd_folder pcl_common pcl_kdtree pcl_gpu_people pcl_io pcl_visualization)
 
diff --git a/io/tools/CMakeLists.txt b/io/tools/CMakeLists.txt
index 818da1d99..1254e4c87 100644
--- a/io/tools/CMakeLists.txt
+++ b/io/tools/CMakeLists.txt
@@ -1,28 +1,30 @@
 set(SUBSYS_NAME tools)
 
-if(WITH_OPENNI)
-  PCL_ADD_EXECUTABLE(pcl_openni_grabber_example COMPONENT ${SUBSYS_NAME} SOURCES openni_grabber_example.cpp)
-  target_link_libraries(pcl_openni_grabber_example pcl_common pcl_io)
+if(PCL_BINARIES)
+  if(WITH_OPENNI)
+    PCL_ADD_EXECUTABLE(pcl_openni_grabber_example COMPONENT ${SUBSYS_NAME} SOURCES openni_grabber_example.cpp)
+    target_link_libraries(pcl_openni_grabber_example pcl_common pcl_io)
 
-  PCL_ADD_EXECUTABLE(pcl_openni_grabber_depth_example COMPONENT ${SUBSYS_NAME} SOURCES openni_grabber_depth_example.cpp)
-  target_link_libraries(pcl_openni_grabber_depth_example pcl_common pcl_io)
+    PCL_ADD_EXECUTABLE(pcl_openni_grabber_depth_example COMPONENT ${SUBSYS_NAME} SOURCES openni_grabber_depth_example.cpp)
+    target_link_libraries(pcl_openni_grabber_depth_example pcl_common pcl_io)
 
 
-  PCL_ADD_EXECUTABLE(pcl_openni_pcd_recorder COMPONENT ${SUBSYS_NAME} SOURCES openni_pcd_recorder.cpp)
-  target_link_libraries(pcl_openni_pcd_recorder pcl_common pcl_io Boost::date_time)
-endif()
+    PCL_ADD_EXECUTABLE(pcl_openni_pcd_recorder COMPONENT ${SUBSYS_NAME} SOURCES openni_pcd_recorder.cpp)
+    target_link_libraries(pcl_openni_pcd_recorder pcl_common pcl_io Boost::date_time)
+  endif()
 
-PCL_ADD_EXECUTABLE(pcl_pcd_convert_NaN_nan COMPONENT ${SUBSYS_NAME} SOURCES pcd_convert_NaN_nan.cpp)
-PCL_ADD_EXECUTABLE(pcl_pcd_introduce_nan COMPONENT ${SUBSYS_NAME} SOURCES pcd_introduce_nan.cpp)
-PCL_ADD_EXECUTABLE(pcl_convert_pcd_ascii_binary COMPONENT ${SUBSYS_NAME} SOURCES convert_pcd_ascii_binary.cpp)
-if(VTK_FOUND)
-  PCL_ADD_EXECUTABLE(pcl_converter COMPONENT ${SUBSYS_NAME} SOURCES converter.cpp)
-  target_link_libraries(pcl_converter pcl_common pcl_io)
+  PCL_ADD_EXECUTABLE(pcl_pcd_convert_NaN_nan COMPONENT ${SUBSYS_NAME} SOURCES pcd_convert_NaN_nan.cpp)
+  PCL_ADD_EXECUTABLE(pcl_pcd_introduce_nan COMPONENT ${SUBSYS_NAME} SOURCES pcd_introduce_nan.cpp)
+  PCL_ADD_EXECUTABLE(pcl_convert_pcd_ascii_binary COMPONENT ${SUBSYS_NAME} SOURCES convert_pcd_ascii_binary.cpp)
+  if(VTK_FOUND)
+    PCL_ADD_EXECUTABLE(pcl_converter COMPONENT ${SUBSYS_NAME} SOURCES converter.cpp)
+    target_link_libraries(pcl_converter pcl_common pcl_io)
+  endif()
+  PCL_ADD_EXECUTABLE(pcl_hdl_grabber COMPONENT ${SUBSYS_NAME} SOURCES hdl_grabber_example.cpp)
+  target_link_libraries(pcl_convert_pcd_ascii_binary pcl_common pcl_io)
+  target_link_libraries(pcl_hdl_grabber pcl_common pcl_io)
+  target_link_libraries(pcl_pcd_introduce_nan pcl_common pcl_io)
 endif()
-PCL_ADD_EXECUTABLE(pcl_hdl_grabber COMPONENT ${SUBSYS_NAME} SOURCES hdl_grabber_example.cpp)
-target_link_libraries(pcl_convert_pcd_ascii_binary pcl_common pcl_io)
-target_link_libraries(pcl_hdl_grabber pcl_common pcl_io)
-target_link_libraries(pcl_pcd_introduce_nan pcl_common pcl_io)
 
 #libply inherited tools
 add_subdirectory(ply)
diff --git a/io/tools/ply/CMakeLists.txt b/io/tools/ply/CMakeLists.txt
index 16d054cda..3b2bc037e 100644
--- a/io/tools/ply/CMakeLists.txt
+++ b/io/tools/ply/CMakeLists.txt
@@ -1,11 +1,13 @@
-PCL_ADD_EXECUTABLE(pcl_ply2obj COMPONENT ${SUBSYS_NAME} SOURCES ply2obj.cpp)
-target_link_libraries(pcl_ply2obj pcl_io_ply)
+if(PCL_BINARIES)
+  PCL_ADD_EXECUTABLE(pcl_ply2obj COMPONENT ${SUBSYS_NAME} SOURCES ply2obj.cpp)
+  target_link_libraries(pcl_ply2obj pcl_io_ply)
 
-PCL_ADD_EXECUTABLE(pcl_ply2ply COMPONENT ${SUBSYS_NAME} SOURCES ply2ply.cpp)
-target_link_libraries(pcl_ply2ply pcl_io_ply)
+  PCL_ADD_EXECUTABLE(pcl_ply2ply COMPONENT ${SUBSYS_NAME} SOURCES ply2ply.cpp)
+  target_link_libraries(pcl_ply2ply pcl_io_ply)
 
-PCL_ADD_EXECUTABLE(pcl_ply2raw COMPONENT ${SUBSYS_NAME} SOURCES ply2raw.cpp)
-target_link_libraries(pcl_ply2raw pcl_io_ply)
+  PCL_ADD_EXECUTABLE(pcl_ply2raw COMPONENT ${SUBSYS_NAME} SOURCES ply2raw.cpp)
+  target_link_libraries(pcl_ply2raw pcl_io_ply)
 
-PCL_ADD_EXECUTABLE(pcl_plyheader COMPONENT ${SUBSYS_NAME} SOURCES plyheader.cpp)
-target_link_libraries(pcl_plyheader pcl_io_ply)
+  PCL_ADD_EXECUTABLE(pcl_plyheader COMPONENT ${SUBSYS_NAME} SOURCES plyheader.cpp)
+  target_link_libraries(pcl_plyheader pcl_io_ply)
+endif()
diff --git a/outofcore/tools/CMakeLists.txt b/outofcore/tools/CMakeLists.txt
index f33e8b447..48b64d670 100644
--- a/outofcore/tools/CMakeLists.txt
+++ b/outofcore/tools/CMakeLists.txt
@@ -1,11 +1,13 @@
 set(SUBSYS_NAME tools)
 
+if(PCL_BINARIES)
 # pcl_outofcore_process
-PCL_ADD_EXECUTABLE(pcl_outofcore_process COMPONENT ${SUBSYS_NAME} SOURCES outofcore_process.cpp)
-target_link_libraries(pcl_outofcore_process pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
+  PCL_ADD_EXECUTABLE(pcl_outofcore_process COMPONENT ${SUBSYS_NAME} SOURCES outofcore_process.cpp)
+  target_link_libraries(pcl_outofcore_process pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
 
-PCL_ADD_EXECUTABLE(pcl_outofcore_print COMPONENT ${SUBSYS_NAME} SOURCES outofcore_print.cpp)
-target_link_libraries(pcl_outofcore_print pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
+  PCL_ADD_EXECUTABLE(pcl_outofcore_print COMPONENT ${SUBSYS_NAME} SOURCES outofcore_print.cpp)
+  target_link_libraries(pcl_outofcore_print pcl_common pcl_filters pcl_io pcl_octree pcl_outofcore)
+endif()
 
 if(NOT VTK_FOUND)
   set(DEFAULT FALSE)
@@ -24,7 +26,9 @@ else()
          ../src/visualization/scene.cpp
          ../src/visualization/viewport.cpp)
 
-  # pcl_outofcore_viewer
-  PCL_ADD_EXECUTABLE(pcl_outofcore_viewer COMPONENT ${SUBSYS_NAME} SOURCES ${srcs} BUNDLE)
-  target_link_libraries(pcl_outofcore_viewer pcl_common pcl_io pcl_outofcore pcl_visualization pcl_octree pcl_filters)
+  if(PCL_BINARIES)
+    # pcl_outofcore_viewer
+    PCL_ADD_EXECUTABLE(pcl_outofcore_viewer COMPONENT ${SUBSYS_NAME} SOURCES ${srcs} BUNDLE)
+    target_link_libraries(pcl_outofcore_viewer pcl_common pcl_io pcl_outofcore pcl_visualization pcl_octree pcl_filters)
+  endif()
 endif()
diff --git a/people/CMakeLists.txt b/people/CMakeLists.txt
index dca32d662..537fd9be4 100644
--- a/people/CMakeLists.txt
+++ b/people/CMakeLists.txt
@@ -55,7 +55,7 @@ PCL_ADD_INCLUDES("${SUBSYS_NAME}" "${SUBSYS_NAME}/impl" ${impl_incs})
 
 #SET_TARGET_PROPERTIES("${LIB_NAME}" PROPERTIES LINKER_LANGUAGE CXX)
 
-if(WITH_OPENNI)
+if(WITH_OPENNI AND PCL_BINARIES)
   PCL_ADD_EXECUTABLE(pcl_ground_based_rgbd_people_detector COMPONENT ${SUBSYS_NAME} SOURCES apps/main_ground_based_people_detection.cpp BUNDLE)
   target_link_libraries(pcl_ground_based_rgbd_people_detector pcl_common pcl_kdtree pcl_search pcl_sample_consensus pcl_filters pcl_io pcl_visualization pcl_segmentation pcl_people)
 endif()
diff --git a/simulation/tools/CMakeLists.txt b/simulation/tools/CMakeLists.txt
index 39ece06c8..ecb767872 100644
--- a/simulation/tools/CMakeLists.txt
+++ b/simulation/tools/CMakeLists.txt
@@ -2,7 +2,7 @@ set(SUBSYS_NAME tools)
 
 find_package(GLUT)
 
-if(NOT (GLEW_FOUND AND GLUT_FOUND))
+if(NOT (GLEW_FOUND AND GLUT_FOUND) OR NOT PCL_BINARIES)
   return()
 endif()
 
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index 8a72fdaa2..12c081648 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -8,7 +8,7 @@ set(REASON "")
 PCL_SUBSYS_OPTION(build "${SUBSYS_NAME}" "${SUBSYS_DESC}" ${DEFAULT} "${REASON}")
 PCL_SUBSYS_DEPEND(build NAME ${SUBSYS_NAME} DEPS ${SUBSYS_DEPS} OPT_DEPS ${SUBSYS_OPT_DEPS})
 
-if(NOT build)
+if(NOT build OR NOT PCL_BINARIES)
   return()
 endif()
 
